package org.compi2.codigo3d.parser;

import java_cup.runtime.Symbol;

//PARSER PARA EL ARCHIVO DE ESCENARIOS
parser code
{://Codigo visible

    public void syntax_error(Symbol s){
        System.err.println(s);
    }

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
        System.err.println("T.T");
        System.err.println(s);
    }

:}

action code
{://Codigo de acciones
      
:}

terminal String ID, ENTERO, DECIMAL;
terminal TokenC3D MAS, MENOS, MULT, DIV, POT, PAR_IZQ, PAR_DER, IGUAL, DIFERENTE,MAYOR_QUE,MENOR_QUE,MAYOR_IGUAL,MENOR_IGUAL;
terminal TokenC3D AND, OR, NOT;
nonterminal NodoC3D inicial, expresion;

precedence left OR;
precedence left AND;
precedence left NOT;
precedence left IGUAL, DIFERENTE;
precedence left MENOR_QUE, MAYOR_QUE, MENOR_IGUAL, MAYOR_IGUAL;
precedence left MAS, MENOS;
precedence left MULT, DIV; 
precedence right POT; 

start with inicial;

inicial     ::= {: ControlC3D.reiniciar(); :} expresion:exp 
                    {: 
                        if(ControlC3D.getBandera()==0){
                            ControlC3D.agregarC3D("//Ãšltimo valor: " + exp.getCad());
                        }
                        else{
                            ControlC3D.agregarC3D("//verdadero: " + exp.getV()+"\n");
                            ControlC3D.agregarC3D("//Falso: " + exp.getF());
                        }
                        RESULT = exp;
                    :};

expresion   ::= expresion:izq OR 
                    {:
                        String c3d = izq.getF()+": \n";
                        ControlC3D.agregarC3D(c3d);
                    :}
                    expresion:der
                    {:
                        String temp = izq.getV()+", "+der.getV();
                        String temp2 = der.getF();
                        RESULT = new NodoC3D(temp,temp2);
                    :}
                    
            |   expresion:izq AND{:
                        String c3d = izq.getV()+": \n";
                        ControlC3D.agregarC3D(c3d);
                    :} expresion:der
                    {:
                        String temp = der.getV();
                        String temp2 = izq.getF()+", "+der.getF();
                        RESULT = new NodoC3D(temp,temp2);
                    :}
            
            |   NOT expresion:exp
                    {: 
                        String temp = exp.getV();
                        String temp2 = exp.getF();
                        RESULT = new NodoC3D(temp2,temp); 
                    :}

            |   expresion:izq IGUAL expresion:der
                    {:
                        String temp = ControlC3D.generaLabel();
                        String temp2 = ControlC3D.generaLabel();
                        String c3d ="if (" + izq.getCad() + " == " + der.getCad() + ") goto"+temp+"\n";
                        c3d = c3d + "goto " + temp2+"\n";
                        ControlC3D.agregarC3D(c3d);
                        RESULT = new NodoC3D(temp,temp2);
                    :}

            |   expresion:izq DIFERENTE expresion:der
                    {:
                        String temp = ControlC3D.generaLabel();
                        String temp2 = ControlC3D.generaLabel();
                        String c3d ="if (" + izq.getCad() + " != " + der.getCad() + ") goto"+temp+"\n";
                        c3d = c3d + "goto " + temp2+"\n";
                        ControlC3D.agregarC3D(c3d);
                        RESULT = new NodoC3D(temp,temp2);
                    :}

            |   expresion:izq MENOR_QUE expresion:der
                    {:
                        String temp = ControlC3D.generaLabel();
                        String temp2 = ControlC3D.generaLabel();
                        String c3d ="if (" + izq.getCad() + " < " + der.getCad() + ") goto"+temp+"\n";
                        c3d = c3d + "goto " + temp2+"\n";
                        ControlC3D.agregarC3D(c3d);
                        RESULT = new NodoC3D(temp,temp2);
                    :}

            |   expresion:izq MAYOR_QUE expresion:der
                    {:
                        String temp = ControlC3D.generaLabel();
                        String temp2 = ControlC3D.generaLabel();
                        String c3d ="if (" + izq.getCad() + " > " + der.getCad() + ") goto"+temp+"\n";
                        c3d = c3d + "goto " + temp2+"\n";
                        ControlC3D.agregarC3D(c3d);
                        RESULT = new NodoC3D(temp,temp2);
                    :}

            |   expresion:izq MAYOR_IGUAL expresion:der
                    {:
                        String temp = ControlC3D.generaLabel();
                        String temp2 = ControlC3D.generaLabel();
                        String c3d ="if (" + izq.getCad() + " >= " + der.getCad() + ") goto"+temp+"\n";
                        c3d = c3d + "goto " + temp2+"\n";
                        ControlC3D.agregarC3D(c3d);
                        RESULT = new NodoC3D(temp,temp2);
                    :}

            |   expresion:izq MENOR_IGUAL expresion:der
                    {:
                        String temp = ControlC3D.generaLabel();
                        String temp2 = ControlC3D.generaLabel();
                        String c3d ="if (" + izq.getCad() + " <= " + der.getCad() + ") goto"+temp+"\n";
                        c3d = c3d + "goto " + temp2+"\n";
                        ControlC3D.agregarC3D(c3d);
                        RESULT = new NodoC3D(temp,temp2);
                    :}

            |   expresion:izq MAS expresion:der
                    {: 
                        String temp = ControlC3D.generaTemp();
                        String c3d = temp + " = " + izq.getCad() + " + " + der.getCad() + ";\n";
                        ControlC3D.agregarC3D(c3d);
                        RESULT = new NodoC3D(temp); 
                    :}
            |   expresion:izq MENOS expresion:der
                    {: 
                        String temp = ControlC3D.generaTemp();
                        String c3d = temp + " = " + izq.getCad() + " - " + der.getCad() + ";\n";
                        ControlC3D.agregarC3D(c3d);
                        RESULT = new NodoC3D(temp); 
                    :}
            |   expresion:izq MULT expresion:der
                    {: 
                        String temp = ControlC3D.generaTemp();
                        String c3d = temp + " = " + izq.getCad() + " * " + der.getCad() + ";\n";
                        ControlC3D.agregarC3D(c3d);
                        RESULT = new NodoC3D(temp); 
                    :}
            |   expresion:izq DIV expresion:der
                    {: 
                        String temp = ControlC3D.generaTemp();
                        String c3d = temp + " = " + izq.getCad() + " / " + der.getCad() + ";\n";
                        ControlC3D.agregarC3D(c3d);
                        RESULT = new NodoC3D(temp); 
                    :}
            |   expresion:izq POT expresion:der
                    {: 
                        String temp = ControlC3D.generaTemp();
                        String c3d = temp + " = " + izq.getCad() + " ^ " + der.getCad() + ";\n";
                        ControlC3D.agregarC3D(c3d);
                        RESULT = new NodoC3D(temp); 
                    :}
            |   MENOS expresion:exp 
                    {: 
                        String temp = ControlC3D.generaTemp();
                        String c3d = temp + " = - " + exp.getCad() + ";\n";
                        ControlC3D.agregarC3D(c3d);
                        RESULT = new NodoC3D(temp); 
                    :}
            |   PAR_IZQ expresion:exp PAR_DER   
                    {: RESULT = exp; :}
            |   ID:id           
                    {: RESULT = new NodoC3D(id); :}
            |   ENTERO:entero   
                    {: RESULT = new NodoC3D(entero); :}
            |   DECIMAL:decimal 
                    {: RESULT = new NodoC3D(decimal); :}
            ;